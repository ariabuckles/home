# This is Git's per-user configuration file.
[user]
    name = Aria Buckles
    email = aria@pilot.com
[alias]
    rebase-package-lock = "!f() { git reset HEAD -- ${GIT_PREFIX:-.}/package-lock.json && git checkout -- ${GIT_PREFIX:-.}/package-lock.json && cd ${GIT_PREFIX:-.} && npm install && git add -- package-lock.json; }; f"
    create-branch = "!git checkout -b $@ && git branch --set-upstream-to master && true"
    archive-branch = "!git branch --list \"$1*\" | xargs -t -I% git branch -m % $(echo % | sed 's/^/z-/') && true"
    clean-deployed-branches = "!git branch --list \"ss_web_*\" | xargs -t -I% git branch -D %"
    clean-branches = "!git branch --merged origin/master --no-column | grep -v '\\*\\| z-\\|master' | sed 's/\\-[a-z0-9]*$//' | xargs -I% git zbr %"
    view = "!git show $@ | nvim -R - && true"
    vlog = "!git log --name-status $(git merge-base HEAD origin/master)..HEAD \"$@\" | nvim -R - && true"
# From https://stackoverflow.com/questions/20240526/how-to-git-bisect-only-on-one-branchs-commits:
    bisect-merges = "!f() { git bisect start \"$1\" \"$2\" && git rev-list \"$2..$1\" --merges --first-parent | xargs -I% git rev-list \"%^2\" --not \"%^\" | xargs git bisect skip }; f"
    p = "!git pull --rebase && git submodule update --init && true"
    cb = create-branch
    st = status -u
    ls = status -u
    co = checkout
    s = "!git checkout $(git br | grep \"$1\" | sed 's/\\*//' | tail -1) && true"
    br = branch --list '[^z]*' 'z[^-/]*'
    su = "!git branch --set-upstream-to master && git rebase master && true"
    l = log --name-status
    lp = log -p
    ri = rebase -i
    rc = rebase --continue
    ci = commit -v
    alias = config --get-regexp ^alias
    rpl = rebase-package-lock
    zbr = archive-branch
    cbr = clean-branches
    annotate = blame
    ann = blame
    update-pr = "!git push -f origin HEAD:aria/$(/usr/bin/git rev-parse --abbrev-ref HEAD | sed -e 's/-[0-9a-z]$//')"
    fmt = "!cd -- ${GIT_PREFIX:-.} && npm run format -- $(git log --format=%H --grep '^Formatting: `npm run format`$' | head -n1) && git add app && git commit -m 'Formatting: `npm run format`'"
    myprs = "!hub pr list -f '%au %pC %>(8) %i %Creset %t %l %Nc %n' | grep '^[^#]*ariabuckles[^#]*#' | sed 's/^[^#]*//'"
    assigned = "!hub pr list -f '%as %pC %>(8) %i %Creset %t %l %Nc %n' | grep '^[^#]*ariabuckles[^#]*#' | sed 's/^[^#]*//'"
    pr-message = "!(git pr-message-title && echo && git pr-message-issues && git pr-message-changes && git pr-message-dev-notes && git pr-message-test && git pr-message-release) | jsed '(\\n)\\n+' '$1$1' || true"
    pr-message-title = "!git log -n1 --pretty=format:%s && echo || true"
    pr-message-issues = "!echo '## Relevant Issues' && echo && git pr-message-raw-issues && echo"
    pr-message-changes = "!echo '## Summary' && echo && git pr-message-raw-body"
    pr-message-dev-notes = "!(echo '## Reviewer notes (Developer-facing)' && echo && echo 'This change consists of the following commits:' && echo && git pr-message-raw-list && echo) | jsed '/^[^\\n]*\\n\\n[^\\n]*\\n*$/' '' && echo"
    pr-message-test = "!echo '## Test plan' && git pr-message-raw-test && echo"
    pr-message-release = "!echo '## Release notes (User-facing)' && echo && echo ' - [ ] When the PR lands, paste the release notes above into the top of [the Release Notes paper document]' && echo || true"
    pr-message-raw-issues = "!git log --reverse $(git merge-base HEAD origin/master)..HEAD --pretty=format:%b | grep -i -E '^(fixes|addresses) \\S+$' | jsed '^([Ff]ixes|[Aa]ddresses) ([A-Z]+-\\d+)$' '$1 https://pilothq.atlassian.net/browse/$2' || true"
    pr-message-raw-body = "!git log --reverse $(git merge-base HEAD origin/master)..HEAD --pretty=format:'%bEND_OF_COMMIT' | grep -i -E -v '^(fixes|addresses) \\S+$' | jsed '/Test plan:[\\S\\s]*?END_OF_COMMIT\\s?/gi' '' || true"
    pr-message-raw-list = "!git log --reverse $(git merge-base HEAD origin/master)..HEAD --pretty=format:'1. %h %s' || true"
    pr-message-raw-test = "!git log --reverse $(git merge-base HEAD origin/master)..HEAD --pretty=format:'START_OF_COMMIT%bEND_OF_COMMIT' | jsed '/START_OF_COMMIT[\\S\\s]*?(?:Test plan:\\s([\\S\\s]*?)|.*?)END_OF_COMMIT\\s?/gi' '$1' || true"
    pr = "!bash -c \"git update-pr && hub pull-request -c --head aria/$(/usr/bin/git rev-parse --abbrev-ref HEAD | sed -e 's/-[0-9a-z]$//') --file <(git pr-message) && echo 'New PR created'; hub pr list --head aria/$(/usr/bin/git rev-parse --abbrev-ref HEAD | sed -e 's/-[0-9a-z]$//') --base master --format '%n%pC%i%Creset %t %Cblue%U%Creset%n%n'\""
    new-pr = pr
[core]
    excludesfile = ~/.gitignoreglobal
    abbrev = 8
    #pager = less -+FX -i
[pull]
    rebase = true
[merge]
    tool = vimdiff
    conflictstyle = diff3
[mergetool]
    prompt = false
